# 这是一份TEB参数文件，格式大致为：
# 参数
#   官方给的类型和默认值  
#   官方给的注释
#   我们自己的注释

TebLocalPlannerROS:
  # Robot Configuration Parameters
  acc_lim_x: 3
      # (double, default: 0.5)
      # Maximum translational acceleration of the robot in meters/sec^2
      # 机器人的最大平移加速度，单位是米/秒^2  
  acc_lim_theta: 20
      # (double, default: 0.5)
      # Maximum angular acceleration of the robot in radians/sec^2
      # 机器人的最大角加速度，单位是弧度/秒^2 
  max_vel_x: 1.2
      # (double, default: 0.4)
      # Maximum translational velocity of the robot in meters/sec
      # 机器人的最大平移速度，单位为米/秒  
  max_vel_x_backwards: 0.2
      # (double, default: 0.2)
      # Maximum absolute translational velocity of the robot while driving backwards in meters/sec. See optimization parameter weight_kinematics_forward_drive
      # 倒车时机器人的最大绝对平移速度，单位为米/秒。 参见优化参数weight_kinematics_forward_drive  
  max_vel_theta: 0.5
      # (double, default: 0.3)
      # Maximum angular velocity of the robot in radians/sec
      # 机器人的最大角速度，单位是弧度/秒  
  # The following parameters are relevant only for carlike robots.
  # 以下参数仅适用于类车机器人  
  min_turning_radius: 0.8
      #  (double, default: 0.0)
      # Minimum turning radius of a carlike robot (set to zero for a diff-drive robot).
      # 类车机器人的最小转弯半径(为差速驱动机器人设置为零)。 
  wheelbase: 0.35
      # (double, default: 1.0)
      # The distance between the rear axle and the front axle. The value might be negative for back-wheeled robots (only required if ~<name>/cmd_angle_instead_rotvelis set to true).
      # 后桥和前桥之间的距离。 对于后轮机器人，该值可能为负值(仅当~<name>/cmd_angle_instead_rotvelis设置为true时才需要)。  
  cmd_angle_instead_rotvel: True
      # (bool, default: false)
      # Substitute the rotational velocity in the commanded velocity message by the corresponding steering angle [-pi/2,pi/2]. Note, changing the semantics of yaw rate depending on the application is not preferable. Here, it just complies with the inputs required by the stage simulator. Datatypes in ackermann_msgs are more appropriate, but are not supported by move_base. The local planner is not intended to send commands by itself.
      # 用相应的转向角[-pi/2,pi/2]代替命令速度信息中的转速。 注意，根据应用程序更改偏航率的语义并不可取。 在这里，它只是遵从了舞台模拟器所需的输入。 ackermann_msgs中的数据类型更合适，但是move_base不支持。 本地规划器本身并不打算发送命令。  
  # The following parameters are relevant only for holonomic robots: New in ROS kinetic
  #  以下参数仅适用于完整机器人  
    # Note, reduce ~<name>/weight_kinematics_nh significantly in order to adjust the tradeoff between compliant longitudinal motion and non-compliant lateral motion (strafing).
  # max_vel_y: 
      # (double, default: 0.0)
      # Maximum strafing velocity of the robot (should be zero for non-holonomic robots!)
  # acc_lim_y: 
      # (double, default: 0.5)
      # Maximum strafing acceleration of the robot
  # The following parameters are relevant for the footprint model used for optimization (see Tutorial Obstacle Avoidance and Robot Footprint Model). New in version 0.3
  #  以下参数与用于优化的足迹模型相关(请参见指南避障和机器人足迹模型)。 0.3新版功能  
  footprint_model/type: "line"
      # (string, default: "point")
      # Specify the robot footprint model type used for optimization. Different types are "point", "circular", "line", "two_circles" and "polygon." The type of the model significantly influences the required computation time.
      # 指定用于优化的机器人足迹模型类型。 不同的类型有“点”、“圆”、“线”、“双圆”和“多边形”。 模型的类型对所需的计算时间有显著影响。  
  # footprint_model/radius: 
      # (double, default: 0.2)
      # This parameter is only relevant for type "circular". It contains the radius of the circle. The center of the circle is located at the robot's axis of rotation.
      # 此参数只与类型“circular”相关。 它包含了圆的半径。 圆心位于机器人的旋转轴上。  
  footprint_model/line_start: [-0.3, 0.0]
      # (double[2], default: [-0.3, 0.0])
      # This parameter is only relevant for type "line". It contains the start coordinates of the line segment.
      # 此参数只与类型“line”相关。 它包含线段的起始坐标。  
  footprint_model/line_end: [0.3, 0.0]
      # (double[2], default: [0.3, 0.0])
      # This parameter is only relevant for type "line". It contains the end coordinates of the line segment.
      # 此参数只与类型“line”相关。 它包含线段的结束坐标。  
  # footprint_model/front_offset: 
      # (double, default: 0.2)
      # This parameter is only relevant for type "two_circles". It describes how much the center of the front circle is shifted along the robot's x-axis. The robot's axis of rotation is assumed to be located at [0,0].
  # footprint_model/front_radius: 
      # (double, default: 0.2)
      # This parameter is only relevant for type "two_circles". It contains the radius of front circle.
  # footprint_model/rear_offset: 
      # (double, default: 0.2)
      # This parameter is only relevant for type "two_circles". It describes how much the center of the rear circle is shifted along the robot's negative x-axis. The robot's axis of rotation is assumed to be located at [0,0].
  # footprint_model/rear_radius: 
      # (double, default: 0.2)
      # This parameter is only relevant for type "two_circles". It contains the radius of rear circle.
      # 以上四个参数与双圆有关
  # footprint_model/vertices: 
      # (double[], default: [ [0.25,-0.05], [...], ...])
      # This parameter is only relevant for type "polygon". It contains the list of polygon vertices (2d coordinates each). The polygon is always closed: do not repeat the first vertex at the end.
      # 此参数只与类型“polygon（多边形）”相关。 它包含多边形顶点的列表(每个都是2d坐标)。 多边形总是闭合的:不要重复结束时的第一个顶点。  
  is_footprint_dynamic: 
      # (bool, default: false)
      # If true, updates the footprint before checking trajectory feasibility
      # 如果为true，在检查轨迹可行性之前更新内存足迹  

  # Goal Tolerance Parameters
  xy_goal_tolerance: 0.3
      # (double, default: 0.2)
      # Allowed final euclidean distance to the goal position in meters
      # 允许最后到目标位置的欧氏距离，单位是米  
  yaw_goal_tolerance: 0.5
      # (double, default: 0.2)
      # Allowed final orientation error in radians
      # 允许最终方向误差(弧度)  
  free_goal_vel: True
      # (bool, default: false)
      # Remove the goal velocity constraint such that the robot can arrive at the goal with maximum speed
      # 消除目标速度约束，使机器人以最大速度到达目标 
  complete_global_plan: True   
    # Obstacles

  # Trajectory Configuration Parameters
  # 轨道配置参数
  teb_autosize: True
      # 不知道这个是啥
  dt_ref: 0.3
      # (double, default: 0.3)
      # Desired temporal resolution of the trajectory (the trajectory is not fixed to dt_ref since the temporal resolution is part of the optimization, but the trajectory will be resized between iterations if dt_ref +-dt_hysteresis is violated.
      # 期望的轨迹的时间分辨率(轨迹不是固定到dt_ref，因为时间分辨率是优化的一部分，但如果dt_ref +-dt_hysteresis被违反，轨迹将在迭代之间调整大小。)
  dt_hysteresis: 0.03
      # (double, default: 0.1)
      # Hysteresis for automatic resizing depending on the current temporal resolution, usually approx. 10% of dt_ref is recommended
      # 根据当前时间分辨率自动调整大小的滞后，通常是近似的。 推荐使用dt_ref的10%  
  min_samples: 3
      # (int, default: 3)
      # Minimum number of samples (should be always greater than 2)
      # 最小样本数（始终大于2）
  global_plan_overwrite_orientation: True
      # (bool, default: true)
      # Overwrite orientation of local subgoals provided by the global planner (since they often provide only a 2D path)
      # 覆盖全局规划器提供的局部子目标的方向(因为它们通常只提供2D路径)  
  global_plan_viapoint_sep: -1
      # (double, default: -0.1 (disabled))
      # If positive, via-points are extrected from the global plan (path-following mode). The value determines the resolution of the reference path (min. separation between each two consecutive via-points along the global plan, if negative: disabled). Refer to parameter weight_viapoint for adjusting the intensity. New in version 0.4
      # 如果为正数，则从全局计划(路径跟踪模式)中提取途经点。 该值决定了引用路径的分辨率(如果为负值，则禁用)。 请参考参数weight_viapoint调整强度。 0.4新版功能  
  max_global_plan_lookahead_dist: 1.0
      # (double, default: 3.0)
      # Specify the maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization. The actual length is than determined by the logical conjunction of the local costmap size and this maximum bound. Set to zero or negative in order to deactivate this limitation.
      # 指定全局计划子集的最大长度(累计欧氏距离)，以便进行优化。 实际长度是由本地成本图大小和这个最大边界的逻辑结合决定的。 设置为零或负数以禁用此限制。  
  force_reinit_new_goal_dist: 
      # (double, default: 1.0)
      # Reinitialize the trajectory if a previous goal is updated with a separation of more than the specified value in meters (skip hot-starting)
      # 如果先前的目标被更新，以米为单位的间隔超过了指定的值，则重新初始化轨迹(跳过热启动)  
  feasibility_check_no_poses: 1
      # (int, default: 4)
      # Specify up to which pose on the predicted plan the feasibility should be checked each sampling interval.
      # 指定每个采样间隔应在预测计划的哪个位置进行可行性检查。  
  publish_feedback: False
      # (bool, default: false)
      # Publish planner feedback containing the full trajectory and a list of active obstacles (should be enabled only for evaluation or debugging). See list of publishers above.
      # 发布包含完整轨迹和活动障碍列表的计划器反馈(应仅用于评估或调试)。 参见上面的publisher列表。  
  shrink_horizon_backup: 
      # (bool, default: true)
      # Allows the planner to shrink the horizon temporary (50%) in case of automatically detected issues (e.g. infeasibility). Also see parameter shrink_horizon_min_duration.
      # 允许规划器在自动检测到问题(例如不可行性)时临时缩小视界(50%)。 请参见参数shrink_horizon_min_duration。  
  allow_init_with_backwards_motion: True
      # (bool, default: false)
      # If true, underlying trajectories might be initialized with backwards motions in case the goal is behind the start within the local costmap (this is only recommended if the robot is equipped with rear sensors).
      # 如果为真，底层轨迹可能会被初始化为反向运动，以防目标在局部costmap的起始位置之后(只有当机器人配备了后方传感器时，才建议这样做)。  
  exact_arc_length: False
      # (bool, default: false)
      # If true, the planner uses the exact arc length in velocity, acceleration and turning rate computations (-> increased cpu time), otherwise the Euclidean approximation is used.
      # 如果为真，规划器在速度、加速度和转弯率计算中使用精确的弧长(->增加cpu时间)，否则使用欧几里德近似。  
  shrink_horizon_min_duration: 
      # (double, default: 10.0)
      # Specify minimum duration for the reduced horizon in case an infeasible trajectory is detected (refer to parameter shrink_horizon_backup in order to activate the reduced horizon mode).
      # 指定减少的地平线的最小持续时间，以防检测到不可行的轨迹(参考参数shrink_horizon_backup以激活减少的地平线模式)..  

  # Obstacle Parameters
  # 障碍参数
  min_obstacle_dist: 0.3
      # (double, default: 0.5)
      # Minimum desired separation from obstacles in meters
      # 与障碍物的最小期望距离，单位为米  
  include_costmap_obstacles: True
      # (bool, default: true)
      # Specify if obstacles of the local costmap should be taken into account. Each cell that is marked as obstacle is considered as a point-obstacle. Therefore do not choose a very small resolution of the costmap since it increases computation time. In future releases this circumstance is going to be addressed as well as providing an additional api for dynamic obstacles.
      # 说明是否应该考虑当地成本图的障碍。 标记为障碍的每个单元格被视为点障碍。 因此，不要选择分辨率非常小的成本图，因为这会增加计算时间。 在未来的版本中，这种情况将得到解决，并为动态障碍提供额外的api。 
  costmap_obstacles_behind_robot_dist: 2.0
      # (double, default: 1.0)
      # Limit the occupied local costmap obstacles taken into account for planning behind the robot (specify distance in meters).
      # 限制在机器人后面规划时考虑到的被占用的局部costmap障碍物(指定距离为米)。  
  obstacle_poses_affected: 30
      # (int, default: 30)
      # Each obstacle position is attached to the closest pose on the trajectory in order to keep a distance. Additional neighbors can be taken into account as well. Note, this parameter might be removed in future versions, since the the obstacle association strategy has been modified in kinetic+. Refer to the parameter description of legacy_obstacle_association.
      # 为了保持距离，每个障碍物的位置都与轨迹上最近的姿势相连。 其他的邻居也可以考虑在内。 注意，这个参数可能在以后的版本中被删除，因为障碍关联策略已经在kinetic+中修改。 请参见legacy_obstacle_association的参数说明。  
  inflation_dist: 
      # (double, default: pre kinetic: 0.0, kinetic+: 0.6)
      # Buffer zone around obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect). Also refer to the weight weight_inflation.
      # 障碍物周围的缓冲区具有非零惩罚成本(应大于min_obstacle_dist才能生效)。 也可参考重量weight_inflation。  
  include_dynamic_obstacles: 
      # (bool, default: false)
      # If this parameter is set to true, the motion of obstacles with non-zero velocity (provided via user-supplied obstacles on topic ~/obstacles or obtained from the costmap_converter) is predicted and considered during optimization via a constant velocity model. New
      # 如果该参数设置为true，那么非零速度的障碍运动(通过主题~/obstacle上的用户提供的障碍或从costmap_converter获得)将通过恒速度模型进行预测和优化。
  legacy_obstacle_association: 
      # (bool, default: false)
      # The strategy of connecting trajectory poses with obstacles for optimization has been modified (see changelog). You can switch to the old/previous strategy by setting this parameter to true. Old strategy: for each obstacle, find the nearest TEB pose; new strategy: for each teb pose, find only "relevant" obstacles.
      # 修改了轨迹姿态与障碍物连接优化的策略(见changelog)。 通过将该参数设置为true，可以切换到旧的/以前的策略。 旧的策略:对于每个障碍物，找到最近的TEB姿势; 新策略:对于每一个teb姿势，只找到“相关的”障碍。  
  obstacle_association_force_inclusion_factor: 
      # (double, default: 1.5)
      # The non-legacy obstacle association strategy tries to connect only relevant obstacles with the discretized trajectory during optimization. But all obstacles within a specifed distance are forced to be included (as a multiple of min_obstacle_dist). E.g. choose 2.0 in order toenforce the consideration obstacles within a radius of 2.0*min_obstacle_dist. [This parameter is used only if parameter legacy_obstacle_association is false]
      # 非遗留障碍关联策略在优化过程中试图只将相关障碍与离散轨迹连接起来。 但是在指定距离内的所有障碍物都必须包含在内(作为min_obstacle_dist的倍数)。 例如，选择2.0以强制在2.0*min_obstacle_dist的半径范围内设置考虑障碍。 [legacy_obstacle_association为false时才使用] 
  obstacle_association_cutoff_factor: 
      # (double, default: 5)
      # See obstacle_association_force_inclusion_factor, but beyond a multiple of [value]*min_obstacle_dist all obstacles are ignored during optimization. Parameter obstacle_association_force_inclusion_factor is processed first. [This parameter is used only if parameter legacy_obstacle_association is false]
      # 参考obstacle_association_force_inclusion_factor，但是在优化过程中，超过[value]*min_obstacle_dist的倍数，所有的障碍都会被忽略。 首先处理参数obstacle_association_force_inclusion_factor。 [legacy_obstacle_association为false时才使用]  
   # The following parameters are relevant only if costmap_converter plugins are desired (see tutorial):
   #  以下参数仅在需要costmap_converter插件时才相关(请参阅教程)  :
  costmap_converter_plugin: ""
        # (string, default: "")
        # Define plugin name in order to convert costmap cells to points/lines/polygons. Set an empty string to disable the conversion such that all cells are treated as point-obstacles.
        # 定义插件名称，以便将costmap单元格转换为点/线/多边形。 设置一个空字符串以禁用转换，以便将所有单元格视为点-障碍。  
  costmap_converter_spin_thread: True
        # (bool, default: true)
        # If set to true, the costmap converter invokes its callback queue in a different thread.
        # 如果设置为true，那么costmap转换器将在另一个线程中调用它的回调队列。  
  costmap_converter_rate: 5
        # (double, default: 5.0)
        # Rate that defines how often the costmap_converter plugin processes the current costmap (the value should not be much higher than the costmap update rate) [in Hz].
        # 速率，定义了costmap_converter插件处理当前costmap的频率(该值不应该比costmap更新速率高很多)[以Hz为单位]。  

  # Optimization Parameters
  # 优化参数
  optimization_activate: True
      # 优化激活
  optimization_verbose: False
      # 详细优化
  no_inner_iterations: 5
      # (int, default: 5)
      # Number of actual solver iterations called in each outerloop iteration. See param no_outer_iterations.
      # 每次外部循环迭代中实际调用的求解器迭代数。 参见param no_outer_iterations。  
  no_outer_iterations: 4
      # (int, default: 4)
      # Each outerloop iteration automatically resizes the trajectory according to the desired temporal resolution dt_ref and invokes the internal optimizer (that performs no_inner_iterations). The total number of solver iterations in each planning cycle is therefore the product of both values.
      # 每个outerloop迭代根据所需的时间分辨率dt_ref自动调整轨迹的大小，并调用内部优化器(执行no_inner_iterations)。 因此，在每个规划周期中求解迭代的总次数是两个值的乘积。  
  penalty_epsilon: 0.03
      # (double, default: 0.1)
      # Add a small safety margin to penalty functions for hard-constraint approximations
      # 为硬约束近似的惩罚函数添加一个小的安全裕度  
  weight_max_vel_x: 2
      # (double, default: 2.0)
      # Optimization weight for satisfying the maximum allowed translational velocity
      # 满足最大允许平移速度的优化权重  
  weight_max_vel_theta: 1
      # (double, default: 1.0)
      # Optimization weight for satisfying the maximum allowed angular velocity
      # 满足最大允许角速度的优化权重  
  weight_acc_lim_x: 1
      # (double, default: 1.0)
      # Optimization weight for satisfying the maximum allowed translational acceleration
      # 满足最大允许平移加速度的优化权重  
  weight_acc_lim_theta: 1
      # (double, default: 1.0)
      # Optimization weight for satisfying the maximum allowed angular acceleration
      # 满足最大允许角加速度的优化权重
  weight_kinematics_nh: 1000
      # (double, default: 1000.0)
      # Optimization weight for satisfying the non-holonomic kinematics (this parameter must be high since the kinematics equation constitutes an equality constraint, even a value of 1000 does not imply a bad matrix condition due to small 'raw' cost values in comparison to other costs).
      # 满足非完整运动学的优化权值(这个参数必须很高，因为运动学方程构成一个等式约束，即使值为1000，也不意味着一个不好的矩阵条件，因为与其他成本相比，“原始”成本值很小)。  
  weight_kinematics_forward_drive: 10
      # (double, default: 1.0)
      # Optimization weight for forcing the robot to choose only forward directions (positive transl. velocities). A small weight (e.g. 1.0) still allows driving backwards. A value around 1000 almost prevents backward driving (but cannot be guaranteed).
      # 优化重量，迫使机器人只选择正向方向(正转。 速度)。 较小的重量(例如1.0)仍然允许向后行驶。 1000左右的值几乎可以防止向后驾驶(但不能保证)。  
  weight_kinematics_turning_radius: 1
      # (double, default: 1.0)
      # Optimization weight for enforcing a minimum turning radius (only for carlike robots).
      # 优化砝码以加强最小转弯半径(仅适用于汽车型机器人)。  
  weight_optimaltime: 1
      # (double, default: 1.0)
      # Optimization weight for contracting the trajectory w.r.t transition/execution time
      # 收缩轨迹的优化权值w.r.t过渡/执行时间  
  weight_obstacle: 50
      # (double, default: 50.0)
      # Optimization weight for keeping a minimum distance from obstacles
      # 与障碍物保持最小距离的优化权重  
  weight_viapoint: 
      # (double, default: 1.0)
      # Optimization weight for minimzing the distance to via-points (resp. reference path). New in version 0.4
      # 为使到过点的距离最小的优化权值(例如。 参考路径)。 0.4新版功能  
  weight_inflation: 
      # (double, default: 0.1)
      # Optimization weight for the inflation penalty (should be small).
      # 膨胀惩罚的优化权重(应该很小)。  
  weight_adapt_factor: 
      # (double, default: 2.0)
      # Some special weights (currently weight_obstacle) are repeatedly scaled by this factor in each outer TEB iteration (weight_new = weight_old*factor). Increasing weights iteratively instead of setting a huge value a-priori leads to better numerical conditions of the underlying optimization problem.
      # 一些特殊的权重(目前是weight_obstacle)在每个外部TEB迭代中重复地按这个因子进行缩放(weight_new = weight_old*factor)。 迭代地增加权值，而不是预先设置一个巨大的值，可以使底层优化问题的数值条件更好。  
  # weight_dynamic_obstacle: 10 
      # not in use yet
  # alternative_time_cost: False 
      # not in use yet

  # Parallel Planning in distinctive Topologies
  # 独特拓扑中的并行规划
  simple_exploration: False
      # 简单的探索
  enable_homotopy_class_planning: False
      # (bool, default: true)
      # Activate parallel planning in distinctive topologies (requires much more CPU resources, since multiple trajectories are optimized at once)
      # 在不同的拓扑中激活并行规划(需要更多的CPU资源，因为多条轨迹同时被优化)  
  enable_multithreading: False
      # (bool, default: true)
      # Activate multiple threading in order to plan each trajectory in a different thread
      # 激活多个线程，以便在不同的线程计划每个轨迹  
  max_number_classes: 4
      # (int, default: 4)
      # Specify the maximum number of distinctive trajectories taken into account (limits computational effort)
      # 指定所考虑的独特轨迹的最大数量(限制计算工作量)  
  selection_cost_hysteresis: 
      # (double, default: 1.0)
      # Specify how much trajectory cost must a new candidate have w.r.t. a previously selected trajectory in order to be selected (selection if new_cost < old_cost*factor).
      # 指定一个新的候选者必须对之前选择的轨迹付出多少代价才能被选中(如果new_cost < old_cost*factor进行选择)。  
  selection_obst_cost_scale: 
      # (double, default: 100.0)
      # Extra scaling of obstacle cost terms just for selecting the 'best' candidate.
      # 为了选择“最佳”候选人，额外增加了障碍成本术语。  
  selection_viapoint_cost_scale: 
      # (double, default: 1.0)
      # Extra scaling of via-point cost terms just for selecting the 'best' candidate. New in version 0.4
      # 额外的通过点成本术语只是为了选择“最佳”候选人。 0.4新版功能  
  selection_alternative_time_cost: False
      # (bool, default: false)
      # If true, time cost (sum of squared time differences) is replaced by the total transition time (sum of time differences).
      # 如果为真，时间成本(时差平方和)被总转移时间(时差和)所取代。  
  roadmap_graph_no_samples: 15
      # (int, default: 15)
      # Specify the number of samples generated for creating the roadmap graph
      # 指定为创建路线图图而生成的示例数量  
  roadmap_graph_area_width: 5
      # (double, default: 6)
      # Random keypoints/waypoints are sampled in a rectangular region between start and goal. Specify the width of that region in meters.
      # 在起点和目标之间的矩形区域中随机抽取关键点/路径点。 指定该区域的宽度(单位为米)。  
  h_signature_prescaler: 0.5
      # (double, default: 1.0)
      # Scale internal parameter (H-signature) that is used to distinguish between homotopy classes. Warning: reduce this parameter only, if you observe problems with too many obstacles in the local cost map, do not choose it extremly low, otherwise obstacles cannot be distinguished from each other (0.2<value<=1).
      # 用于区分同伦类的尺度内部参数(h -签名)。 警告:仅减少此参数，如果在本地成本图中观察到障碍物太多的问题，不要选择太低，否则障碍物无法区分(0.2<value<=1)。  
  h_signature_threshold: 0.1
      # (double, default: 0.1)
      # Two H-signatures are assumed to be equal, if both the difference of real parts and complex parts are below the specified threshold.
      # 当实部和复部的差值均低于指定的阈值时，假设两个H-signatures相等。 
  obstacle_keypoint_offset: 0.1
      # 障碍关键点抵消
  obstacle_heading_threshold: 0.45
      # (double, default: 1.0)
      # Specify the value of the scalar product between obstacle heading and goal heading in order to take them (obstacles) into account for exploration.
      # 指定障碍航向和目标航向之间的标量积值，以便在探索时将它们(障碍)考虑在内。  
  visualize_hc_graph: False
      # (bool, default: false)
      # Visualize the graph that is created for exploring distinctive trajectories (check marker message in rviz)
      # 可视化为探索独特的轨迹而创建的图表(在rviz中检查标记信息)  
  viapoints_all_candidates: 
      # (bool, default: true)
      # If true, all trajectories of different topologies are attached to the set of via-points, otherwise only the trajectory sharing the same topology as the initial/global plan is connected with them (no effect on test_optim_node). New in version 0.4
      # 如果为真，则不同拓扑的所有轨迹都连接到这组通过点上，否则只有与初始/全局计划共享相同拓扑的轨迹与它们相连(对test_optim_node没有影响)。 0.4新版功能  
  switching_blocking_period: 
      # (double, default: 0.0)
      # Specify a time duration in seconds that needs to be expired before a switch to a new equivalence class is allowed.
      # 指定允许切换到新的等价类之前需要过期的持续时间(以秒为单位)。  

  # Miscellaneous Parameters
  # 其他参数
  odom_topic: odom
      # (string, default: "odom")
      # Topic name of the odometry message, provided by the robot driver or simulator.
      # 里程表消息的主题名称，由机器人司机或模拟器提供。  
  map_frame: /odom
      # (string, default: "odom")
      # Global planning frame (in case of a static map, this parameter must be usually changed to "/map".
      # 全局规划框架(对于静态映射，此参数通常必须更改为“/map”。  

